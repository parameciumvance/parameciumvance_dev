* 重點一覽
虛擬環境
版本控制
測試(單元/demo)
編譯
執行
除錯日誌機制
錯誤修正

* 錯誤修正
為什麼之前沒發現?->補強測試項目(單元測試或demo測試)->修改直到測試通過
怎麼避免錯誤出現?->補強SOP
怎麼追出錯誤源頭?->TROUBLESHOOT

* 添加測試
ROS框架參考（還有rostest尚未研究）
http://wiki.ros.org/gtest
http://docs.ros.org/en/jade/api/catkin/html/howto/format2/run_tests.html
建構和測試整合進行->`catkin_make all run_tests_MYPACK`

* 版本控制
參考git note
提交時附上
-Changelog
-troubleshoot
-test/反省

* 其他提醒
- 若程式要由系統執行(開機自啟動),應避免依賴USER或HOME目錄
- 確認可執行檔（bin和tool）的可執行屬性

* 安裝依賴
執行腳本update_dependencies.bash,需檢查額外安裝的內容,特別是server版裝到桌面環境(gnome-shell)的問題

* 架構(參考examples/new_project)

* 日誌機制(需搭配清理以免塞爆磁碟空間)
用logging的話要自動建目錄
日誌搜尋ELK
狀態監控Prometheus.Grafana

* 畫面提示系統
e.g. BbotManager的setInfo
在等待工作執行前和主要任務結束時提示,以利掌握停在何階段
中途需顯示細節時,要有停留時間(2s)

* 重構整併
重構整併專案後,舊的版控資料做為legacy存參(在專案外另外保存,較不會造成搜尋到同檔案的混淆)

* 桌面圖標
可準備.desktop檔方便點擊使用(Ubuntu18可以在檔案系統直接點擊,Ubuntu20則不能,要放到桌面或applications)

* 學習
關注其他專案的更新紀錄從中學習

* 背景參數
-rosparam
缺點:無法跨launch檔使用

-環境變數
缺點:取值都是字串,還要解析較麻煩.沒有層級.
優點:bash環境可簡單source更新

-yaml
要用函式庫,在launch檔或bash環境難取值